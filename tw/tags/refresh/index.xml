<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refresh on </title>
    <link>https://ykhorzon.github.io/tw/tags/refresh/</link>
    <description>Recent content in Refresh on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tw</language>
    <managingEditor>ykhorizon@gmail.com (ykhorizon)</managingEditor>
    <webMaster>ykhorizon@gmail.com (ykhorizon)</webMaster>
    <copyright>(c) 2017 ykhorizon</copyright>
    <lastBuildDate>Fri, 21 Jul 2017 10:35:25 +0800</lastBuildDate>
    
	<atom:link href="https://ykhorzon.github.io/tw/tags/refresh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>電腦科學(Computer Science)到底在學什麼？</title>
      <link>https://ykhorzon.github.io/tw/computer/experience/what_is_computer_science/</link>
      <pubDate>Fri, 21 Jul 2017 10:35:25 +0800</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/computer/experience/what_is_computer_science/</guid>
      <description>昨天剛好在 Facebook 程式人社團社團，看見一個準備要升大學的小朋友詢問：
 想問一件事情，我已經會寫程式。 大學明年可以自由選系，如果不選資工選數學的話， 會是很不明智的決定嗎?
 認真探討這個問題前，先說說最近的感受，剛好契合此問題。
工具迭代有感 最近趕工一些專案，重新學習 Modern Web 的 Framework 和 Tools，網頁前端工具迭代速度非常快，大約每3年都會重新大洗牌一次。面對問題選擇適合的工具，在工具琳瑯滿目的年代成為生從必要一種技術。各種 Framework 和 Tools 像是工具箱中的神奇法寶，但如選擇不當，下場會是事倍功半。
 工具快速迭代時空下，我要抓住什麼才能存活下去？ 不斷學習，只是基本條件;不斷突破自己的極限，是挑戰  我們還能作什麼？
 文章到這裡，是不是也發現問題和前面小朋友的問題，也許有幾分神似？如果能夠重來，你會把時間投注在哪些項目？做些什麼事情？
回到原本的故事，小朋友的問題  如果是我，怎麼回覆他的問題？
 我會把問題拆解成幾個部分，先別亂下開處方(建議)
 你了解自己適合什麼嗎？  做什麼事情讓你感到興奮？ 哪先事情能夠你願意不眠不休投入，樂此不疲？ 有什麼確定很定厭惡的事情嗎？  你能把自己表達問題表達清楚嗎？  你有什麼考量？工作導向？經濟？包袱？  理解你想選擇的內容是什麼嗎？  資工系在學什麼？為什麼而學？應用？ 同樣的問題，數學系？   大家怎麼回答？ 我大致用上面拆解問題架構分一類，就簡稱第一類、第二類與第三類
第三類 這則留言是所有這類中最好，直接點出重點，夠豐富與精闢，資訊科學是在做什麼？本質的精神內容都被詳細列舉。
 資訊科學: 計算的本質 + 電腦軟硬體架構運作原理
 資工系從來都不是程式系 資工的精神，在於瞭解計算的本質。 舉例而言，Data Structure 教我們如何有效管理複雜且龐大的資料。Algorithm 教我們何謂高效率的計算方法。Compiler 教我們如何系統化的轉換高階語言。Computation Theory 教我們如何定義一個問題是否可被計算，與如何評估計算複雜度。Computer Architecture 教我們如何設計有效的計算機器。 寫程式本身只是一種實作方法，不同領域的人，學習與使用不同的程式語言解決該領域的特定問題。寫程式本身如此而已，當然，要寫的好，還是得有多年的苦練才行。 資工系的本質亦是解決問題。針對一個可被計算之問題，找一種更好的抽像計算方法，用軟體或是硬題實作皆可，使得問題可以在更短的時間內，或是更少的計算資源之下被解決。 資工領域的聖殿，Turing Award。 資工領域的聖杯，P = NP ?</description>
    </item>
    
  </channel>
</rss>