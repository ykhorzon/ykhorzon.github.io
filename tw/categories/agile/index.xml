<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on </title>
    <link>https://ykhorzon.github.io/tw/categories/agile/</link>
    <description>Recent content in Agile on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tw</language>
    <managingEditor>ykhorizon@gmail.com (ykhorizon)</managingEditor>
    <webMaster>ykhorizon@gmail.com (ykhorizon)</webMaster>
    <copyright>(c) 2017 ykhorizon</copyright>
    <lastBuildDate>Sat, 18 Aug 2018 17:46:11 +0800</lastBuildDate>
    
	<atom:link href="https://ykhorzon.github.io/tw/categories/agile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>從『讓李小龍你看見 Kanban 的美好』到改進我的 Personal Kanban - Part I kanban 觀念釐清</title>
      <link>https://ykhorzon.github.io/tw/2018/08/18/%E5%BE%9E%E8%AE%93%E6%9D%8E%E5%B0%8F%E9%BE%8D%E4%BD%A0%E7%9C%8B%E8%A6%8B-kanban-%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%88%B0%E6%94%B9%E9%80%B2%E6%88%91%E7%9A%84-personal-kanban---part-i-kanban-%E8%A7%80%E5%BF%B5%E9%87%90%E6%B8%85/</link>
      <pubDate>Sat, 18 Aug 2018 17:46:11 +0800</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/2018/08/18/%E5%BE%9E%E8%AE%93%E6%9D%8E%E5%B0%8F%E9%BE%8D%E4%BD%A0%E7%9C%8B%E8%A6%8B-kanban-%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%88%B0%E6%94%B9%E9%80%B2%E6%88%91%E7%9A%84-personal-kanban---part-i-kanban-%E8%A7%80%E5%BF%B5%E9%87%90%E6%B8%85/</guid>
      <description>&lt;h1 id=&#34;文章要點&#34;&gt;文章要點&lt;/h1&gt;

&lt;p&gt;文章主要分成&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一篇 Part I 是『讓李小龍你看見 Kanban 的美好』的統整和心得，參雜一些個人的解釋&lt;/li&gt;
&lt;li&gt;第二篇 Part II 則是我嘗試使用學習到的kanban觀念，改進我的『個人看板』（尚未完成）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;kanban-簡介&#34;&gt;Kanban 簡介&lt;/h1&gt;

&lt;p&gt;如果你上網搜尋 Kanban 可能會出現，兩種最常見的解釋，其一是&lt;a href=&#34;https://en.wikipedia.org/wiki/Kanban&#34;&gt;豐田生產模式的 kanban&lt;/a&gt; ，發明人為&lt;a href=&#34;https://en.wikipedia.org/wiki/Taiichi_Ohno&#34;&gt;大野耐一&lt;/a&gt;，致力於工廠生產效率改善；其二為應用於&lt;a href=&#34;https://en.wikipedia.org/wiki/Kanban_(development)&#34;&gt;軟體流程開發的 Kanban (Development)&lt;/a&gt;，此方法著名得提倡者 &lt;a href=&#34;https://www.linkedin.com/in/agilemanagement/&#34;&gt;David J. Anderson&lt;/a&gt;，他是微軟導入 kanban 方法等敏捷方法的先驅，解救微軟績效不佳的支援部門，設法尋找一套方法讓部門問題自然浮現；早期著名著作有 &lt;a href=&#34;https://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402&#34;&gt;Kanban: Successful Evolutionary Change for Your Technology Business&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DevOps 全棧工程師-活動心得</title>
      <link>https://ykhorzon.github.io/tw/2017/08/02/devops-%E5%85%A8%E6%A3%A7%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/</link>
      <pubDate>Wed, 02 Aug 2017 12:41:57 +0800</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/2017/08/02/devops-%E5%85%A8%E6%A3%A7%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E6%B4%BB%E5%8B%95%E5%BF%83%E5%BE%97/</guid>
      <description>Speaker:
 odd-e 柴叔(柴鋒)  (P.S. 本文演講消化後心得，加入部分我自己觀點)
歷史脈絡 開發、維運，分分合合 柴叔從開發歷史的脈絡娓娓道來，從服務或應用簡單的年代，開發（Development)與維運(Operation)可以一起包辦，但隨著複雜度的提高，逐漸將開發（Development) 與維運(Operation)獨立成兩個團隊。久而久之，雙方的溝通本成增加，合作程度低下，最終造成總體效能下降(開發與測試的關聯，但這邊不詳細敘述)。人們開始思考需要一個穿針引線的角色，他/她需打通開發與維運流程，增進溝通效率，共同協作完成任務，目前當紅的 DevOps的一種解釋。
你以為過去沒有 DevOps? 在遠古開發時代(?)，沒有 Docker 或 Ansible 這類工具。但別忘了其實底層絕大多數的工作，都可以用 shell script 完成，可見 shell script 這類基本功有多重要。時代在改變，但要完成的工作並沒有改變，大多是變複雜，解決問題的觀念類似。
再者，microservice 這類型的觀念，其實也早在 Unix 哲學(Unix philosophy)中被提及，差異是在不同系統層級實作( Do One Thing and Do It Well. 可以對照到 microservice)，當代有更方便工具，抽象化細節與簡化操作流程。
框架工具之於觀念
 工具只是溝通工具，而不是溝通的本身 舉例：Jenkins只是CI的工具，CI的關鍵是CI觀念本身，不管用任何方式達成都好
 框架工具之於基本功
 框架不會幫你解決產品的問題，幾乎與你的產品無關 基礎不紮實，只花時間在學習框架或工具，遭遇的狀況牽扯底層或基本面，也是無法處理
 舉例：Java 工程師 v.s Ops 維運工程師 上圖比較 Java 工程師與 Ops 工程師的技能對照，一目了然自己缺少哪個技能。一般前段或後端工程師的 skill set 從 bottom-up 到 top-down 大家都很清楚，但提到 DevOps 大家似乎被 Top-down 工具給迷惑住了！這算是一張check list，提醒自己是否還缺少哪個部分。</description>
    </item>
    
    <item>
      <title>User Story 的那些人與那些事</title>
      <link>https://ykhorzon.github.io/tw/2017/05/03/user-story-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%BA%E8%88%87%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Wed, 03 May 2017 10:32:13 +0800</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/2017/05/03/user-story-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%BA%E8%88%87%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>&lt;p&gt;&lt;img style=&#34;width:700px;&#34; src=&#34;https://ykhorzon.github.io/content_img/user_story_and_others/story.jpg&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;User Story 不只是一張卡片，是說故事與溝通需求的載體&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;從這篇文章得到&#34;&gt;從這篇文章得到&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;此篇是 User Story 實戰篇的階議題&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;心得&#34;&gt;心得&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;有使用過 User Story 經驗的人，能夠討論出真實問題，彼此切磋，討論氣氛活絡 (有一點像是 Planning Poker 分享大會)&lt;/li&gt;
&lt;li&gt;Alway observe and find bottleneck in team ( or system or problem )&lt;/li&gt;
&lt;li&gt;經常思考事情的dependency與前置準備，在真正要動工的時候，把需要的資源都在手上&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-is-user-story&#34;&gt;What is User Story ?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;User stories are short, simple descriptions of a feature told from the perspective of the person who desires the new capability,&amp;gt; usually a user or customer of the system.&lt;/p&gt;

&lt;p&gt;from Mountain Goat Software&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另一個定義&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A user story is a tool used in Agile software development to capture a description of a software feature from an end-user perspective. The user story describes the type of user, what they want and why. A user story helps to create a simplified description of a requirement.&lt;/p&gt;

&lt;p&gt;from TechTarget&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mountaingoatsoftware.com/agile/user-stories&#34;&gt;Mountain Goat Software, User Stories&lt;/a&gt;
&lt;a href=&#34;http://searchsoftwarequality.techtarget.com/definition/user-story&#34;&gt;TechTarget, User Story&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;簡短需求小卡( Card )&lt;/li&gt;
&lt;li&gt;交談 ( Conversation )&lt;/li&gt;
&lt;li&gt;確認 ( Confirmation )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作為基底、high level&lt;/li&gt;
&lt;li&gt;注重在價值&lt;/li&gt;
&lt;li&gt;不要 &lt;em&gt;帶入 Spec.&lt;/em&gt; 或 &lt;em&gt;過多功能描述&lt;/em&gt; 在其中 (會限制 Solution的可能性)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>敏捷需求探索工作坊</title>
      <link>https://ykhorzon.github.io/tw/2017/02/26/%E6%95%8F%E6%8D%B7%E9%9C%80%E6%B1%82%E6%8E%A2%E7%B4%A2%E5%B7%A5%E4%BD%9C%E5%9D%8A/</link>
      <pubDate>Sun, 26 Feb 2017 23:35:22 +0000</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/2017/02/26/%E6%95%8F%E6%8D%B7%E9%9C%80%E6%B1%82%E6%8E%A2%E7%B4%A2%E5%B7%A5%E4%BD%9C%E5%9D%8A/</guid>
      <description>&lt;p&gt;&lt;img style=&#34;width:700px;&#34; src=&#34;https://ykhorzon.github.io/content_img/agile_requirements_discovery/discovery.jpg&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;找到缺少的拼圖就是Impact Mapping&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;你將可以從這篇文章得到&#34;&gt;你將可以從這篇文章得到&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;開發產品簡易全貌 (著重需求探索)&lt;/li&gt;
&lt;li&gt;影響地圖 Impact Mapping 概念與操作&lt;/li&gt;
&lt;li&gt;探訪基礎&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;敏捷概述&#34;&gt;敏捷概述&lt;/h1&gt;

&lt;p&gt;敏捷開發的精神，可以由最就代表性 &lt;strong&gt;&amp;laquo;敏捷宣言&amp;raquo;&lt;/strong&gt; 說起，原文如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are uncovering better ways of developing
software by doing it and helping others do it.
Through this work we have come to value:&lt;/p&gt;

&lt;p&gt;Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan&lt;/p&gt;

&lt;p&gt;That is, while there is value in the items on
the right, we value the items on the left more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;Manifesto for Agile Software Development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;核心精神：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自主管理&lt;/li&gt;
&lt;li&gt;持續改進&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我自己的理解是：
以人的出發思考，每個人願意發表想法、當面溝通比起工具、方法論，更能深入問題的根本(因為軟體是人在開發)
軟體是我們打造的產品，產品本身品質(可讀性、可測試性)，可以更根本解決問題，因為維護文件也是成本&lt;/p&gt;

&lt;p&gt;回歸人的本質，客戶也是人，溝通合作，取得共識，取得雙贏。最為合作底謝的合約白紙黑字必須要有，
但互相合作更為愉快。(有點類似道德和法律的感覺)
最後，接受現實，計畫永遠敢不上變化，用開放的態度適時做出調整。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TGDF 2016 Notes - Fail Fast</title>
      <link>https://ykhorzon.github.io/tw/2016/09/14/tgdf-2016-notes---fail-fast/</link>
      <pubDate>Wed, 14 Sep 2016 23:15:29 +0000</pubDate>
      <author>ykhorizon@gmail.com (ykhorizon)</author>
      <guid>https://ykhorzon.github.io/tw/2016/09/14/tgdf-2016-notes---fail-fast/</guid>
      <description>Fail Fast─為什麼閃退是好事 (Undone) Speaker: 雷亞 Co-founder 楊善詠
挑戰  技術人才培育 跨平台架構  事實上是救火雷亞
員工人數遽增 2011 , 16人 2016, &amp;gt;100人
死亡行軍：規格變更
Reference: SE系統工程師
種下惡因？ 效能問題？ 為了方便？用最簡單方式測試
BUG？ 自己的BUG自己修？那別人的呢？ 來自game engine 的問題
無法修正問題？ =&amp;gt; &amp;laquo;改變規格&amp;raquo;，讓玩家看不到
遊戲前端很難測試 可能的解法 避開錯誤（X） =&amp;gt; 盡可能提早發現錯誤 =&amp;gt; fail fast
簡單Example Defensive Programming 防禦性程式設計(避免software crash為目的）  接到 null 是正常的現象嗎？ 淺在造成bug，卻可能造成無法找出問題  ** NullPointerException ** Debug assert
Check input value ( use assertion too!) Add up the diagnosis info for future</description>
    </item>
    
  </channel>
</rss>